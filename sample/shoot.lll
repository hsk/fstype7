import sample.math
import sample.opengl

def exit(a:int):void


val PI = 3.141592

type bool = int

val false:int = 0
val true:int = 1

val GLUT_RGBA:int = 0
val GLUT_NUMBER:int = 2
val GLUT_DEPTH:int = 16
val GLUT_KEY_LEFT:byte = 100
val GLUT_KEY_UP:byte = 101
val GLUT_KEY_RIGHT:byte = 102
val GLUT_KEY_DOWN:byte = 103
val GLUT_KEY_SPACE:byte = 32

val GL_COLOR_BUFFER_BIT:int = 16384
val GL_QUADS:int = 7
val GL_LINE_LOOP:int = 2
val GL_POLYGON:int = 9

val GL_PROJECTION:int = 0x1701
val GL_DEPTH_BUFFER_BIT:int = 0x00000100
val GL_MODELVIEW:int = 0x1700
val GL_DEPTH_TEST:int = 0x0B71
val GL_BLEND:int = 0x0BE2
val GL_SRC_ALPHA:int = 0x0302
val GL_ONE_MINUS_SRC_ALPHA:int = 0x0303
val GL_ONE:int = 1
val GL_LIGHT0:int = 0x4000
val GL_LIGHTING:int = 0x0B50
val GL_POSITION:int = 0x1203
val GL_DIFFUSE:int = 0x1201
val GL_FRONT_AND_BACK:int = 0x0408

val fullscreen:int = 0

var gameover:Ptr[GameOver]
var ship:Ptr[Ship]

var enemies:Array[Ptr[Enemy],10]
val enemiesCnt:int = 10
var bullets:Array[Ptr[Bullet],50]
val bulletsCnt:int = 50
var particles:Array[Ptr[Particle], 50]
val particlesCnt:int = 50
var clouds:Array[Ptr[Cloud], 50]
val cloudsCnt:int = 50
var shots:Array[Ptr[Shot],10]
val shotsCnt:int = 10
var score:int = 0
var rank:int = 0
var randomValue:int = 1143241
var key:Ptr[Key]

def main(argc:int, argv:Ptr[Ptr[char]]) {

	key = new Key()
	ship = new Ship(232.5, 450.0)
	ship.init()
	
	gameover = new GameOver
	
	gameover.text = "GAME OVER"
	gameover.y = 200
	gameover.x = 200

	var i:int
	for(i = 0; i < bulletsCnt;i++) {
		bullets[i] = new Bullet()
	}

	for(i = 0; i < particlesCnt;i++) {
		particles[i] = new Particle()
	}

	for(i = 0; i < cloudsCnt;i++) {
		clouds[i] = new Cloud()
	}

	for(i = 0; i < shotsCnt;i++) {
		shots[i] = new Shot()
	}

	for(i = 0; i < enemiesCnt;i++) {
		enemies[i] = new Enemy()
	}

  	glutInit(&argc, argv)
  	glutInitWindowSize(640, 480)
  	if (0) {
		glutGameModeString("640x480:32@60")
		glutEnterGameMode()
  	} else {
		glutCreateWindow(argv[0])
  	}
  	// glutFullScreen()
  	glutInitDisplayMode(GLUT_RGBA)
  	// glEnable(GL_DEPTH_TEST)
  	glEnable(GL_BLEND)
  	glEnable(GL_LIGHTING)
  	glEnable(GL_LIGHT0)
  
  	glutDisplayFunc(main_display)
  	glutTimerFunc(20, main_loop, 0)

  	glutSpecialFunc(Key_onDownKey)
  	glutSpecialUpFunc(Key_onUpKey)
  	glutMainLoop()
}

def main_loop(a:int) {
	onEnter()
	glutPostRedisplay()
	glutTimerFunc(20 , main_loop , 0)
}

def random():double = {
	randomValue = randomValue * 143242143 + 432414321
	val a:double = cast(double)0x7fffffff
	randomValue = randomValue & 0x7fffffff
	val b:double = cast(double)randomValue
	(b / a)
}

def onEnter() {
	var cnt = 0
	for (var i = 0; i < enemiesCnt; i++) {
		var enemy = enemies[i]
		if (enemy.visible) {
			cnt++
			enemy.move(enemy)
		}
	}

	if(cnt == 0 || random() * 100 < (rank+1) * (ship.s*0.2+0.5)) {
		var rn1 = random() * 3
		var rnd = cast(int)(rn1)
		rnd is {
			0? addEnemy(0.0, random() * 200.0, 0.0) break
			1? addEnemy(random() * 465.0, 0.0, PI / 2.0) break
			2? addEnemy(465.0, random() * 200.0, PI) break
		}
	}

	if (gameover.visible && key.start) {
		score = 0
		rank = 1
		gameover.visible = false
		ship.init()
	}

	if(ship.visible)ship.move()

	for (i = 0; i < bulletsCnt; i++) {
		var b = bullets[i]
		if(b.visible) {
			b.move()
			if(ship.visible && fabs(ship.x - b.x) < 6.0 && fabs(ship.y - b.y) < 6.0) {
				addParticles(ship.x, ship.y, 100, 0.5, 0.2, 0.1, 1.0)
				ship.exists = false
				ship.visible = false
				gameover.visible = true
			}
		}
	}

	for (i = 0; i < shotsCnt; i++) {
		var s = shots[i]
		if (s.visible) {
			for (var j = 0; j < enemiesCnt; j++) {
				var enemy = enemies[j]
				if(enemy.visible && fabs(enemy.x - s.x) < 30.0 && fabs(enemy.y - s.y) < 30.0) {
					score += 100
					rank = score / 1000
					addParticles(enemy.x, enemy.y, 30, 0.1, 0.2, 0.5, 1.0)
					enemy.visible = false
				}
			}
			s.move()
		}
	}
	for (i = 0; i < particlesCnt; i++) {
		var p = particles[i]
		if(p.visible) p.move()
	}
	for (i = 0; i < cloudsCnt; i++) {
		var p = clouds[i]
		if(p.visible) p.move()
	}
	
	if((ship.s*30.0+1.0)*random() > 0.6) addCloud()
	// txt.text = "SCORE "+score;
}

def color(r:float,g:float,b:float,a:float) {
	var col = Array(r,g,b,a)
	glMaterialfv(GL_FRONT_AND_BACK, GL_DIFFUSE, col)
}
var WIDTH:int = 640
var HEIGHT:int = 480

def main_display() {
  	var _farPlane = 1000.0
  	var _nearPlane = 0.1
  
  	glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);
  	glViewport(0, 0, WIDTH, HEIGHT)

  	glMatrixMode(GL_PROJECTION)
  	glLoadIdentity()


  	// 視野角,アスペクト比(ウィンドウの幅/高さ),描画する範囲(最も近い距離,最も遠い距離)
  	//gluPerspective(90.0, cast(double)WIDTH / cast(double)HEIGHT, 1.0, 10000.0)
    glFrustum(-_nearPlane,
              _nearPlane,
              -_nearPlane * cast(double) HEIGHT / cast(double) WIDTH,
              _nearPlane * cast(double) HEIGHT / cast(double) WIDTH,
              0.1, _farPlane)

	
    glOrtho(0.0, 640.0, 480.0, 0.0, -1.0, 1.0)
  	glMatrixMode(GL_MODELVIEW)
 	// ライトの設定
 	val n:float = 10.0
 	var lightpos:Array[float,4]

 	lightpos[0] = 500.0 * n
 	lightpos[1] = 802.0 * n
 	lightpos[2] = 505.0 * n
 	lightpos[3] = 1.0
//  	glLightfv(GL_LIGHT0, GL_POSITION, cast(Ptr[float])lightpos)

  	glLoadIdentity()
  	glBlendFunc(GL_SRC_ALPHA, GL_ONE)
  	
	glTranslated((random()*4-2)*ship.s*0.2, (random()*8-4)*ship.s*0.4, 0.0)

 
	for (var i = 0; i < enemiesCnt; i++) {
		var enemy = enemies[i]
		if (enemy.visible) {
			enemy.draw()
		}
	}

	if(gameover.visible) {
	}

	if(ship.visible)ship.draw()

	for (i = 0; i < bulletsCnt; i++) {
		var b = bullets[i]
		if (b.visible) {
			b.draw()
		}
	}

	for (i = 0; i < shotsCnt; i++) {
		var s = shots[i]
		if (s.visible) {
			s.draw()
		}
	}

	for (i = 0; i < particlesCnt; i++) {
		var p = particles[i]
		if (p.visible) p.draw()
	}

	for (i = 0; i < cloudsCnt; i++) {
		var p = clouds[i]
		if (p.visible) p.draw()
	}
   
  	glFlush()
}

def addParticles(x:double, y:double, n:int, r:double,g:double,b:double,a:double) {
	for (var i:int = 0; i < n; i++) {
		addParticle(x, y, random() * 100, r, g, b, a)
	}
}

def addBulletN(x:double, y:double, rad:double, n:int, r:double) {
	for (var i:int = 0; i < n; i++) {
		addBullet(x, y, rad +(cast(double)i - cast(double)n / 2.0) * r)
	}
}

def addBullet(x:double, y:double, rad:double) {
	for (var i:int = 0; i < bulletsCnt; i++) {
		val b = bullets[i]
		if (!b.visible) {
			b.init(x, y, rad)
			return
		}
	}
}

def addShot(x:double, y:double, rad:double) {
	for (var i:int = 0; i < shotsCnt; i++) {
		val b = shots[i]
		if(!b.visible) {
			b.init(x, y, rad)
			return
		}
	}
}

def addParticle(x:double, y:double, rad:double, r:double,g:double,b:double,a:double) {
	for (var i:int = 0; i < particlesCnt; i++) {
		val b1 = particles[i]
		if(!b1.visible) {
		  b1.init(x, y, rad, r, g, b, a)
		  return
		}
	}
}

def addEnemy(x:double, y:double, rad:double) {
	for (var i:int = 0; i < enemiesCnt; i++) {
		val b = enemies[i]
		if(!b.visible) {
			b.init(x, y, rad)
			return
		}
	}
}

def addCloud() {
	for (var i:int = 0; i < cloudsCnt; i++) {
		val b = clouds[i]
		if(!b.visible) {
			b.init()
			return
		}
	}
}

def normalRad(v:double):double = {
	v + 2 * PI * (
		if (v >  PI) -1 else
		if (v < -PI) 1 else 0
	)
}

type Key = class {

	up:int
	down:int
	left:int
	right:int
	space:int
	shot:int
	start:int
	speed:int
	
	def this() {
		this.up =
		this.down =
		this.left =
		this.right =
		this.space =
		this.shot =
		this.start =
		this.speed = 0
	}

	def downKey(k:byte) {
		k is {
			GLUT_KEY_UP? this.up = 1 break
			GLUT_KEY_DOWN? this.down = 1 break
			GLUT_KEY_LEFT? this.left = 1 break
			GLUT_KEY_RIGHT? this.right = 1 break
			GLUT_KEY_SPACE? this.start = this.shot = this.space = 1 break
			122 ? this.speed = 1 break
		}
	}
	
	def upKey(k:byte) {
		k is {
			GLUT_KEY_UP? this.up = 0 break
			GLUT_KEY_DOWN? this.down = 0 break
			GLUT_KEY_LEFT? this.left = 0 break
			GLUT_KEY_RIGHT? this.right = 0 break
			GLUT_KEY_SPACE? this.start = this.shot = this.space = 0 break
			122 ? this.speed = 0 break
			27? glutLeaveGameMode() exit(0) break
		}
	}
	
	static onDownKey(k:byte, x:int, y:int) {
		key.downKey(k)
	}

	static onUpKey(k:byte, x:int, y:int) {
		key.upKey(k)
	}
}

type GameOver = class {
	visible:bool
	x:double
	y:double
	text:Ptr[byte]
}

type Ship = class {

	x:double
	y:double
	visible:bool
	speed:double
	exists:bool
	timer:int
	s:double
	
	def this(x:double, y:double) {
		this.speed = 7.0
		this.x = x
		this.y = y
	}

	def init() {
		this.exists = false
		this.timer = 0
		this.visible = true
	}

	def move() {
	  	this.timer++
	  
		if(this.timer > 300) this.exists = true
		if(key.speed) this.s += 0.05 else this.s -= 0.2
		if(this.s > 20.0) this.s = 20.0 else if(this.s < 0.0) this.s = 0.0
				
		var x = 0.0
		var y = 0.0
		
		if(key.shot) addShot(this.x, this.y, -PI / 2)
		if(key.left) x -= this.speed
		if(key.right) x += this.speed
		if(key.up) y -= this.speed
		if(key.down) y += this.speed

		if(x != 0.0 && y != 0.0) {
			x /= 1.4142
			y /= 1.4142
		}
		this.x += x  + random() * 2 - 1
		this.y += y + random() * 2 - 1
		
		if(this.x < 0) this.x = 5 else if(this.x > 465) this.x = 465 - 5
		if(this.y < 0) this.y = 5 else if(this.y > 465) this.y = 465 - 5
		
	}

	def draw() {
		
		glPushMatrix() 
		glTranslated(this.x, this.y, 0.0)

		var x = 15.0
		var y = 15.0
		glBegin(GL_POLYGON)
			color(1.0,0.275,0.275,1.0)
			glNormal3d(0.0,0.0,1.0)
			glVertex3d(-x,y,0.0)
			glVertex3d(x,y,0.0)
			glVertex3d(x,-y,0.0)
			glVertex3d(-x,-y,0.0)
		glEnd()
		glPopMatrix() 
	}

}

type Enemy = class {

	x:double
	y:double
	visible:bool
	speed:double
	rad:double
	r:double
	move:(Ptr[Enemy])=>void
	nextMove:(Ptr[Enemy])=>void
	time:int
	r2:double

	def this() {
		this.speed = 3 + random() * 5.0
		this.rad = 0
		this.r = 0.02 + random() / 10.0
		this.r2 = 0
		this.visible = false
	}

	def init(x:double, y:double, rad:double) {
		this.x = x
		this.y = y
		this.rad = atan((y - ship.y) / (x - ship.x))
		this.visible = true
		this.move = Enemy_move1
	}

	def draw() {
		glPushMatrix()
		glTranslated(this.x, this.y, 0.0)

		var x = 15.0
		var y = 15.0
		glBegin(GL_POLYGON)
			color(0.5,1.0,0.0,1.0)
			glNormal3d(0.0,0.0,1.0)
			glVertex3d(-x,y,0.0)
			glVertex3d(x,y,0.0)
			glVertex3d(x,-y,0.0)
			glVertex3d(-x,-y,0.0)
		glEnd()
		glPopMatrix() 
	}

	def moveBody():double = {
	
		val rad2:double = atan2(ship.y - this.y, ship.x - this.x)

		if (normalRad(this.rad - rad2) < 0) this.rad += this.r
		else this.rad -= this.r

		this.rad = normalRad(this.rad)
		this.x += cos(this.rad) * this.speed
		this.y += sin(this.rad) * this.speed + ship.s
		
//		if(this.x < 0) this.x = 5 else if(this.x > 465) this.x = 465 - 5
		if(this.y > 1065) this.visible = false

		rad2
	}

	def wait(w:int, next:(Ptr[Enemy])=>void) {
		this.time = w
		this.move = Enemy_moveWait
		this.nextMove = next
	}
	
	static moveWait(this:Ptr[Enemy]) {
		this.moveBody()
		this.time -= 1
		if (this.time <= 0) {
			this.move = this.nextMove
		}
	}

	static move1(this:Ptr[Enemy]) {
		val r:double = this.moveBody()
		if (random() > 0.8) {
			addBullet(this.x, this.y, r)
			if (random() > 0.8) {
				this.r2 = 0.0
				this.wait(30, Enemy_move2)
			}
		}
	}

	static move2(this:Ptr[Enemy]) {
		val r:double = this.moveBody()
		val rr:int = cast(int)(random() * 5.0 + 1.0)
		addBulletN(this.x, this.y, r + this.r2, rr, 0.3)

		this.r2 += cast(double)rr * 0.1

		if (random() < 0.03) {
			this.wait(60, Enemy_move1)
		} else {
			this.wait(20, Enemy_move2)
		}
	}

}

type Particle = class {

	x:double
	y:double
	visible:bool
	speed:double
	rad:double
	size:double

	r:double
	g:double
	b:double
	a:double
			
	def this() {
		this.visible = false
	}

	def init(x:double, y:double, rad:double, r:double, g:double, b:double, a:double) {
		this.x = x
		this.y = y
		this.rad = rad
		this.visible = true
		this.speed = random() * 50 + 2
		this.size = 50.0
		this.r = r
		this.g = g
		this.b = b
		this.a = a
	}

	def move():bool = {

		this.x += cos(this.rad) * this.speed
		this.y += sin(this.rad) * this.speed + 30.0  + ship.s

		this.size -= 1.5
		
		if (this.size < 0 || this.x < 0 || 465 < this.x || this.y < 0 || 465 < this.y)
			this.visible = false

		this.visible
	}

	def draw() {
		glPushMatrix()
		glTranslated(this.x, this.y, 0.0)
		
		val x = this.size
		val y = this.size
		glBegin(GL_POLYGON)
			color(cast(float)this.r, cast(float)this.g, cast(float)this.b, cast(float)this.a)
			glNormal3d(0.0,0.0,1.0)
			glVertex3d(-x,y,0.0)
			glVertex3d(x,y,0.0)
			glVertex3d(x,-y,0.0)
			glVertex3d(-x,-y,0.0)
		glEnd()
		glPopMatrix() 
	}

}


type Cloud = class {

	x:double
	y:double
	visible:bool
	speed:double
	size:double
	rot:double
	def this() {
		this.visible = false
	}

	def init() {
		this.rot = random() * 360.0
		this.x = random() * cast(double)WIDTH
		this.visible = true
		this.speed = random() * 0 + 15
		this.size = random() * 100 + 50
		this.y = -(this.size)
	}

	def move():bool = {

		this.y += this.speed  + ship.s

		this.size -= 0.05
		
		if (465.0 + this.size < this.y)
			this.visible = false

		this.visible
	}

	def draw() {
		glPushMatrix()
		glTranslated(this.x, this.y, 0.0)
		glRotated(this.rot,0.0,0.0,1.0)
		
		val x = this.size
		val y = this.size + 30.0
		glBegin(GL_POLYGON)
			color(0.05, 0.2, 0.15, 0.5)
			glNormal3d(0.0,0.0,1.0)
			glVertex3d(-x,y,0.0)
			glVertex3d(x,y,0.0)
			glVertex3d(x,-y,0.0)
			glVertex3d(-x,-y,0.0)
		glEnd()
		glPopMatrix() 
	}

}

type Bullet = class {
	x:double
	y:double
	visible:bool
	speed:double
	rad:double
	rot:double
	def this() {
		this.visible = false
		this.speed = 5
	}

	def init(x:double, y:double, rad:double) {
		this.x = x
		this.y = y
		this.rad = rad
		this.visible = true
		this.rot = 0.0
	}

	def draw() {
		glPushMatrix()
		glTranslated(this.x, this.y, 0.0)
		glRotated(this.rot,0.0,0.0,1.0)
		val x = 10.0
		val y = 10.0
		glBegin(GL_POLYGON)
			color(0.9, 0.2,0.9,1.0)
			glNormal3d(0.0,0.0,1.0)
			glVertex3d(-x,y,0.0)
			glVertex3d(x,y,0.0)
			glVertex3d(x,-y,0.0)
			glVertex3d(-x,-y,0.0)
		glEnd()
		glPopMatrix() 
	}

	def move():bool = {
		this.x += cos(this.rad) * this.speed
		this.y += sin(this.rad) * this.speed  + ship.s
		if(this.x < 0 || 465 < this.x || this.y < 0 || 465 < this.y)
			this.visible = false
		this.rot += 10.0
		this.visible
	}
}

type Shot = class {
	x:double
	y:double
	visible:bool
	speed:double
	rad:double

	def this() {
		this.speed = 25
		this.visible = false
	}

	def init(x:double, y:double, rad:double) {
		this.x = x
		this.y = y
		this.rad = rad
		this.visible = true
	}

	def draw() {
		glPushMatrix() 
		glTranslated(this.x, this.y, 0.0)

		val x = 10.0
		val y = 30.0
		glBegin(GL_POLYGON)
			color(0.1,0.2,0.5,1.0)
			glNormal3d(0.0,0.0,1.0)
			glVertex3d(-x,y,0.0)
			glVertex3d(x,y,0.0)
			glVertex3d(x,-y,0.0)
			glVertex3d(-x,-y,0.0)
		glEnd()
		glPopMatrix() 
	}

	def move():bool = {
		this.x += cos(this.rad) * this.speed
		this.y += sin(this.rad) * this.speed  + ship.s
		if (this.x < 0 || 465 < this.x || this.y < 0 || 465 < this.y)
			this.visible = false
		this.visible
	}

}
/*
def drawChar(k:byte) {
	var arr:Ptr[long]
	k is {
		48 ? arr = Array(28,34,38,42,50,34,28,0) break
		49 ? arr = Array(8,24,8,8,8,8,28,0) break
		50 ? arr = Array(28,34,2,12,16,32,62,0) break
		51 ? arr = Array(28,34,2,12,2,34,28,0) break
		52 ? arr = Array(4,12,20,36,62,4,4,0) break
		53 ? arr = Array(62,32,60,34,2,34,28,0) break
		54 ? arr = Array(28,34,32,60,34,34,28,0) break
		55 ? arr = Array(62,2,4,8,8,16,16,0) break
		56 ? arr = Array(28,34,34,28,34,34,28,0) break
		57 ? arr = Array(28,34,34,30,2,34,28,0) break
		65 ? arr = Array(8,8,20,20,28,34,34,0) break
		66 ? arr = Array(60,34,34,60,34,34,60,0) break
		67 ? arr = Array(12,18,32,32,32,18,12,0) break
		68 ? arr = Array(56,36,34,34,34,36,56,0) break
		69 ? arr = Array(62,32,32,60,32,32,62,0) break
		70 ? arr = Array(62,32,32,60,32,32,32,0) break
		71 ? arr = Array(12,18,32,38,34,18,12,0) break
		72 ? arr = Array(34,34,34,62,34,34,34,0) break
		73 ? arr = Array(28,8,8,8,8,8,28,0) break
		74 ? arr = Array(2,2,2,2,2,34,28,0) break
		75 ? arr = Array(34,36,40,48,40,36,34,0) break
		76 ? arr = Array(32,32,32,32,32,32,62,0) break
		77 ? arr = Array(34,34,54,42,42,34,34,0) break
		78 ? arr = Array(34,34,50,42,38,34,34,0) break
		79 ? arr = Array(28,34,34,34,34,34,28,0) break
		80 ? arr = Array(60,34,34,60,32,32,32,0) break
		81 ? arr = Array(28,34,34,34,42,36,26,0) break
		82 ? arr = Array(60,34,34,60,40,36,34,0) break
		83 ? arr = Array(28,34,32,28,2,34,28,0) break
		84 ? arr = Array(62,8,8,8,8,8,8,0) break
		85 ? arr = Array(34,34,34,34,34,34,28,0) break
		86 ? arr = Array(34,34,20,20,20,8,8,0) break
		87 ? arr = Array(42,42,42,42,20,20,20,0) break
		88 ? arr = Array(34,20,20,8,20,20,34,0) break
		89 ? arr = Array(34,20,20,8,8,8,8,0) break
		90 ? arr = Array(62,2,4,8,16,32,62,0) break
		97 ? arr = Array(0,0,12,2,14,18,14,0) break
		98 ? arr = Array(16,16,28,18,18,18,28,0) break
		99 ? arr = Array(0,0,12,18,16,18,12,0) break
		100 ? arr = Array(2,2,14,18,18,18,14,0) break
		101 ? arr = Array(0,0,12,18,30,16,12,0) break
		102 ? arr = Array(6,8,28,8,8,8,8,0) break
		103 ? arr = Array(0,0,14,18,14,2,12,0) break
		104 ? arr = Array(16,16,28,18,18,18,18,0) break
		105 ? arr = Array(8,0,8,8,8,8,8,0) break
		106 ? arr = Array(4,0,4,4,4,4,24,0) break
		107 ? arr = Array(16,16,18,20,24,20,18,0) break
		108 ? arr = Array(24,8,8,8,8,8,8,0) break
		109 ? arr = Array(0,0,60,42,42,42,42,0) break
		110 ? arr = Array(0,0,28,18,18,18,18,0) break
		111 ? arr = Array(0,0,12,18,18,18,12,0) break
		112 ? arr = Array(0,0,28,18,28,16,16,0) break
		113 ? arr = Array(0,0,14,18,14,2,2,0) break
		114 ? arr = Array(0,0,22,24,16,16,16,0) break
		115 ? arr = Array(0,0,14,16,12,2,28,0) break
		116 ? arr = Array(0,8,30,8,8,8,6,0) break
		117 ? arr = Array(0,0,18,18,18,18,14,0) break
		118 ? arr = Array(0,0,18,18,18,20,8,0) break
		119 ? arr = Array(0,0,42,42,42,20,20,0) break
		120 ? arr = Array(0,0,18,18,12,18,18,0) break
		121 ? arr = Array(0,0,18,18,10,4,24,0) break
		122 ? arr = Array(0,0,30,2,4,8,30,0) break
		_ ? return
	}
}

*/